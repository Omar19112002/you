public class Product {
    private String name;
    private String description;
    private double price;

    // Private constructor to prevent direct instantiation
    private Product(Builder builder) {
        this.name = builder.name;
        this.description = builder.description;
        this.price = builder.price;
    }

    // Getters
    public String getName() {
        return name;
    }

    public String getDescription() {
        return description;
    }

    public double getPrice() {
        return price;
    }

    // Builder class
    public static class Builder {
        private String name;
        private String description;
        private double price;

        // Setter methods
        public Builder setName(String name) {
            this.name = name;
            return this;
        }

        public Builder setDescription(String description) {
            this.description = description;
            return this;
        }

        public Builder setPrice(double price) {
            this.price = price;
            return this;
        }
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Product Form</title>
</head>
<body>
    <h2>Product Form</h2>
    <form action="ProductServlet" method="post">
        Name: <input type="text" name="name"><br>
        Description: <input type="text" name="description"><br>
        Price: <input type="text" name="price"><br>
        <input type="submit" value="Submit">
    </form>
</body>
</html>
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet("/ProductServlet")
public class ProductServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Retrieve form parameters
        String name = request.getParameter("name");
        String description = request.getParameter("description");
        double price = Double.parseDouble(request.getParameter("price"));

        // Create product using builder pattern
        Product product = new Product.Builder()
                .setName(name)
                .setDescription(description)
                .setPrice(price)
                .build();

        // Do something with the product (e.g., save to database, display)
        // For demonstration, let's just print it
        System.out.println("Created Product: " + product.getName() + ", " + product.getDescription() + ", $" + product.getPrice());

        // Redirect to a success page
        response.sendRedirect("success.jsp");
    }
}

        // Build method
        public Product build() {
            return new Product(this);
        }
    }
}


